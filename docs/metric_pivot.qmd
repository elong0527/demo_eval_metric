---
title: "Metric Pivot Functionality"
description: "Transform long-format evaluation results to wide-format tables"
---

# Metric Pivot Functionality

The `MetricEvaluator.pivot_by_group()` and `MetricEvaluator.pivot_by_model()` methods transform long-format evaluation results into wide-format tables, making them suitable for reporting, analysis, and visualization. This guide demonstrates the pivot functionality across different scenarios.

## Overview

The pivot methods support:
- **Multiple scope types**: GLOBAL, MODEL, GROUP, DEFAULT
- **Two pivot orientations**: Group-based rows vs Model-based rows
- **Subgroup compatibility**: Works with single and multiple subgroup variables
- **Automatic column ordering**: Index -> Global -> Group -> Default
- **Custom ordering controls**: `column_order_by` toggles metric-first vs. estimate-first layouts

## Basic Setup

```{python}
import polars as pl
from polars_eval_metrics import MetricDefine, MetricEvaluator, pivot_to_gt
from data_generator import generate_sample_data

# Create sample dataset with comprehensive structure for pivot examples
df = generate_sample_data(
    n_subjects=12,
    n_visits=3,
    n_groups=2,
)
df = df.with_columns(
    pl.col("age_group").cast(pl.Enum(["Young", "Middle", "Senior"]))
)
```

## Case 1: Pivot by Group (without subgroups)

When pivoting by groups, we get one column per group combination for each metric.

```{python}
# Define mixed scope metrics for comprehensive pivot demonstration
mixed_metrics = [
    MetricDefine(name="n_subject", label="Total Enrolled Subjects", scope="global"),
    MetricDefine(name="n_subject", label="Number of Subjects", scope="group"),
    MetricDefine(name="mae", label="MAE"),
    MetricDefine(name="rmse", label="RMSE")
]

# Create evaluator with group_by
evaluator_group = MetricEvaluator(
    df=df,
    metrics=mixed_metrics,
    ground_truth="actual",
    estimates=["model1", "model2"],
    group_by=["treatment"]
)

# Get long format results
evaluator_group.evaluate()
```

```{python}
# Pivot to wide format with group combinations as rows
evaluator_group.pivot_by_group()
```

```{python}
evaluator_group.pivot_by_group().\
    pipe(pivot_to_gt)
```

### Controlling column order

Specify `column_order_by` to switch whether metrics or estimate labels nest first
in the resulting column hierarchy.

```{python}
# Make estimates the outer column level, metrics nested inside
evaluator_group.pivot_by_group(column_order_by="estimates")
```

```{python}
evaluator_group.pivot_by_group(column_order_by="estimates").\
    pipe(pivot_to_gt)
```

## Case 2: Pivot by Group (with subgroups)

Adding subgroups creates separate analyses for each subgroup variable, with multiple rows in the wide format.

```{python}
# Same mixed scope metrics with subgroups
evaluator_group_sub = MetricEvaluator(
    df=df,
    metrics=mixed_metrics,
    ground_truth="actual",
    estimates={"model1": "Model 1", "model2": "Model 2"},
    group_by={"treatment": "Treatment"},
    subgroup_by={"age_group": "Age Group", "region": "Region"}
)

evaluator_group_sub.pivot_by_group()
```

### Order by group

```{python}
evaluator_group_sub.pivot_by_group(row_order_by = "group").\
    pipe(pivot_to_gt)
```

### Order by subgroup 

```{python}
evaluator_group_sub.pivot_by_group(row_order_by = "subgroup").\
    pipe(pivot_to_gt)
```

## Case 3: Pivot by Model (without subgroups)

```{python}
# Use same evaluator as Case 1 for model comparison
evaluator_model = evaluator_group

# Pivot to wide format for model comparison
evaluator_model.pivot_by_model()
```

```{python}
evaluator_model.pivot_by_model().\
    pipe(pivot_to_gt)
```

```{python}
# Make estimates the outer column level, metrics nested inside
evaluator_model.pivot_by_model(column_order_by="estimates")
```

## Case 4: Pivot by Model (with subgroups)

```{python}
# Use same evaluator as Case 2 for model comparison with subgroups
evaluator_model_sub = evaluator_group_sub

# Pivot to wide format for model comparison with subgroups
evaluator_model_sub.pivot_by_model()
```

```{python}
evaluator_model_sub.pivot_by_model().\
    pipe(pivot_to_gt)
```

## Key Points

The pivot functionality transforms long-format results to wide-format tables:

- **`pivot_by_group()`**: Creates rows for each group combination, columns for metrics/models
- **`pivot_by_model()`**: Creates rows for each model, columns for group x metric combinations
- **Subgroups**: Add `subgroup_by` to stratify analysis by demographic variables
- **Automatic column ordering**: Index -> Global -> Group -> Default scope columns
- **Configurable column nesting**: Use `column_order_by` to switch between metric-first or
  estimate-first layouts

## Summary

The pivot functionality provides two complementary views of evaluation results:

- **`pivot_by_group()`**: Groups as rows, model x metric combinations as columns - ideal for comparing metrics across groups
- **`pivot_by_model()`**: Models as rows, group x metric combinations as columns - ideal for comparing models
- **Mixed scope support**: Handles Global, Group, and Default scopes automatically
- **Subgroup stratification**: Separate analysis for each demographic subgroup
- **Clean output**: Intuitive column names using Polars default conventions

Perfect for creating summary tables, analysis reports, and data ready for visualization or export.
