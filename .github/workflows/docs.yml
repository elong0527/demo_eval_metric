name: Build and Deploy Documentation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install polars pydantic pyyaml numpy jupyter ipykernel nbformat nbclient
          pip install pytest pytest-cov
          python -m ipykernel install --user --name=python3
          # Install package in development mode
          pip install -e .
          # Add src to Python path for imports
          echo "PYTHONPATH=${{ github.workspace }}/src:$PYTHONPATH" >> $GITHUB_ENV
          
      - name: Run tests with coverage
        run: |
          # Generate coverage report in the docs directory
          pytest tests/ --cov=src/polars_eval_metrics --cov-report=html:docs/htmlcov --cov-report=xml --cov-report=term
          echo "Coverage report generated at docs/htmlcov"
        continue-on-error: true
          
      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
          
      - name: Build documentation
        run: |
          cd docs
          # Ensure htmlcov exists before building
          if [ ! -d "htmlcov" ]; then
            echo "Creating dummy coverage report"
            mkdir -p htmlcov
            echo "<html><body><h1>Coverage report not yet generated</h1></body></html>" > htmlcov/index.html
          fi
          # Build the documentation
          quarto render --to html --execute
          # Ensure coverage report is in the final site
          if [ -d "htmlcov" ] && [ ! -d "_site/htmlcov" ]; then
            echo "Copying coverage report to _site"
            cp -r htmlcov _site/
          fi
          ls -la _site/ | grep htmlcov || echo "Warning: htmlcov not found in _site"
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_site
          
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4